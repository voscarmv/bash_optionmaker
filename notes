# bash_optionmaker, Copyright 2013 Vicente Oscar Mier Vela
#    This file is part of bash_optionmaker.
#
#    bash_optionmaker is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    bash_optionmaker is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with bash_optionmaker.  If not, see <http://www.gnu.org/licenses/>.
Tue Dec 18 09:55:30 CST 2012
Types of options for a UNIX command:
	Accumulator
		Form
			$ command -a N
			$ command -a
		Function
			If present, increases a register by 1, or if present with N, increases the register by N.
	Argument
		Form
			$ command -A argument
		Function
			Stores 'argument' in a variable, for later use in the program.
	Boolean
		Form
			$ command -b
		Function
			If not present, a certain variable is set as false, else: it becomes true.
	Composite
		Form
			$ command -c
		Function
			It may represent any particular set of the other types of options.
	List
		Form
			$ command -l element1 element2 element3 ...
		Function
			It stores all elements in an array, or some variable, in the program.
Option formats:
	--longoption
		A long, more ver, yet equivalent, representation of a short (of the form -o) option.
	--options x=a,y=b,z=c,...
		Assign values to several variables, for later use in program execution.
	-a -b -c | -abc
		Composite form of multiple short options.
Wed Dec 19 09:51:34 CST 2012
There are 5 'case' sections to be looped over in an option processor:
	1. Variable assignment
		Grab options, and store arguments and branching flags in variables.
	2. Option parsing
		Separate long and short options, with and without arguments, to make them ready for 1.
	3. Help
		Options -h, --help, --version, are reserved for help.
	4. Option termination
		Option -- is reserved for breaking option parsing. It should be right before -* and *
	5. Error reporting
		Options -* and * should come at the end of 'case', for error reporting.
Reference: Beginning portable shell programming, from novice to professional, by Peter Seebach, Ch 6: Invocation and execution, Shell invocation, Manipulating parameters for fun and profit, Older shells: now what? (p. 127)
Wed Dec 19 18:58:56 CST 2012
Take into account the following rules:
	1. ALL options should have a long format, and a short format.
	2. There should be a second stage of error testing, for values from args stored in vars.
	3. Check that 2 or more options have not the same name.
Thu Dec 27 22:13:30 CST 2012
Take into account chapter 6 of Buce Blinn's "Portable shell programming", especially subsections "COMMAND LINE CONVENTIONS" and "When getopts Is Not Available".
Tue Jan  8 10:34:56 CST 2013
Suggested algorithm for optionmaker:
	There are 3 useful kinds of options so far:
		1. Boolean
		2. Argument
		3. Composite
			Use List and Accumulator in Composite, to keep track of the
			amount of elements in options of type
			[ -o O1 [ -o O2 ... ] ]
			3.1. List
			3.2. Accum
			Optionally, use Boolean in any Composite to indicate the existence
			of a particular kind of option
			3.3. Boolean
Ofcourse, we don't want the user increasing Accum or setting Boolean without Composite,
so it would be best to create a 'monolithic' Composite.
Thus:
	-l|--list)
		ARG=$1
		if invalid "$ARG" ; then
			inv_opt_arg_msg
			return 1
		fi
		LIST_ACCUM=`expr $LIST_ACCUM + 1`
		if exists "${ARG}" ; then
			LIST_BOOLE=:
		fi
		shift

The steps for parsing the options arglist of a script should be:
	1. Set al Argument, Boolean and List defaults.
		List defaults should be null, to allow ${LIST+$LIST:}$1
In the case loop:
	1. Process all Argument options first, with error checking
	2. Process all List options, with error checking
	3. Process all Boolean options
		3.1. Always end with --verbose and --help
	4. Separate all Argument options
	5. Separate all Boolean options
	6. Break with --
	7. Check for -* unrecognized options
	8. Break with *
Data for one Argument option is
	- Default value
	- Short name
	- Long name
	- Error check expressions and messages
	- Add short name to Argument separate list
Data for one Boolean option is
	- Default value
	- Short name
	- Long name
	- Add short name to Boolean separate list
Data for List option is
	- Commented default value, or actual default
	- Short name
	- Long name
	- Error check expressions and messages
	- Add short name to Argument separate list
Constant sections for all option parsers are 3.1. and 4. thru 8.
Long name format --long-name=ARG is optional, and probably undesirable.
But there should still be an option for adding it... in the future, mabye...
Tue Jan  8 22:10:48 CST 2013
For more elegance, keep an order, from less to most complex options:
	1. Boolean
	2. Arguments
	3. List
Some interesting strings are:
	Boolean string
	<tab>'-'"${SHORT}"' | --'"${LONG}"')'<newline>
	<tab><tab>"${LONGUPPER}"'=:'<newline>
	;;
	Argument string
	<tab>'-'"${SHORT}"' | --'"${LONG}"')'<newline>
	<tab><tab>'ARG=${1}'<newline>
	<tab><tab>'if '"${INVALID}"' ; then'<newline>
	<tab><tab><tab>'invalid "${FUNCNAME}" "${OPT}" "${ARG}"'<newline>
	<tab><tab>fi<newline>
	<tab><tab>"${LONGUPPER}"'="${ARG}"'<newline>
	<tab><tab>'shift'
	;;
	Default values of booleans and args
	"${LONGUPPER}"'='"${DEFARG}"<newline>
	...
	Accumulate in a single variable
	Put that before the while ${#} -gt 0 ; do loop
The sections which compose the end result are:
C	1. Unrecognized and Invalid message functions (error)
	2. Help message function
	3. Default values declaration
C	4. While withe embedded case
		4.1. Boolean section
		4.2. Argument section
			4.2.1. Error testing section
		4.3. List section
			4.3.1. Error testing section
C		4.4. Verbose boolean
C		4.5. Help message exit
		4.6. Separatable boole "or" -z*|-y*|-x*...)
C		4.7. Boolean separator
		4.8. Separatable args "or" -a*|-b*|-c*...)
C		4.9. Arg separator
C		4.10. -- breaker
C		4.11. Unrecognized option
C		4.12. *) Ender
Each of these represents a particular string, to be constructed using the data from an
input file. Some sections are constant (those marked with a "C"), meaning that they
are always the same, regardless of the contents of the input file
Mon Jan 14 13:14:09 CST 2013
Some additional optional data:
	- Help message
	- Function name
Mon Jan 14 22:57:55 CST 2013
Added some enhancementes, like: help message config, and function name config.
Help message should come inside -h|--help) section, because there may exist several
functions inside a single file.
There is also a problem with VERBOSE. In order to keep portability, it's not possible
to use bash's "local", so VERBOSE can affect functions which are executed from
within other functions which algo use VERBOSE.

Suggested solutions:
	Make help_msg() name configurable, as well as the name of VERBOSE vars.
	For VERBOSE and help_msg(), a second, simple script, could be written
	which would change their names on a per-function basis.
Thu Jan 26 12:45:42 EST 2017
	Added quick and dirty fix to make unrecognized and invalid functions function names relative to main function name.
	The rule: fname line in input file should come last.
